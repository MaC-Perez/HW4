library(Rpath); library(data.table)
groups <- c('whales', 'seals', 'cod', 'whiting', 'mackerel', 'anchovy', 'shrimp',
'benthos', 'zooplankton', 'phytoplankton', 'detritus', 'sealers',
'trawlers', 'seiners', 'bait boats', 'shrimpers')
types <- c(rep(0, 9), 1, 2, rep(3, 5))
AB.params <- create.rpath.params(groups, types)
#Can also assign values using ':=' operator [this is an example]
AB.params$model[Group == 'cod', Biomass := 3]
# Static parameters for this example
#Biomass accumulation and unassimilated production
AB.params$model[Type < 3, BioAcc  := 0]
AB.params$model[Type < 2, Unassim := 0.2]
AB.params$model[Type == 2, Unassim := 0]
#Detrital Fate
AB.params$model[Type < 2, detritus := 1]
AB.params$model[Type > 1, detritus := 0]
#Check for issues in your parameter file with
check.rpath.params(AB.params)
#Once parameter file is built use this to run ecopath
AB <- rpath(AB.params, 'Anchovy Bay')
library(Rpath); library(data.table)
groups <- c('whales', 'seals', 'cod', 'whiting', 'mackerel', 'anchovy', 'shrimp',
'benthos', 'zooplankton', 'phytoplankton', 'detritus', 'sealers',
'trawlers', 'seiners', 'bait boats', 'shrimpers')
types <- c(rep(0, 9), 1, 2, rep(3, 5))
AB.params <- create.rpath.params(groups, types)
#Can also assign values using ':=' operator [this is an example]
AB.params$model[Group == 'cod', Biomass := 3]
# Static parameters for this example
#Biomass accumulation and unassimilated production
AB.params$model[Type < 3, BioAcc  := 0]
AB.params$model[Type < 2, Unassim := 0.2]
AB.params$model[Type == 2, Unassim := 0]
#Detrital Fate
AB.params$model[Type < 2, detritus := 1]
AB.params$model[Type > 1, detritus := 0]
#Check for issues in your parameter file with
check.rpath.params(AB.params)
# Static parameters for this example
#Biomass accumulation and unassimilated production
AB.params$model[Group=="seals", sealers:=0.49604]
AB.params$model[Group=="cod", trawlers:=45]
AB.params$model[Group=="whiting", trawlers:=20]
AB.params$model[Group=="mackerel", seiners:=40]
AB.params$model[Group=="anchovy", seiners:=120]
AB.params$model[Group=="anchovy", "bait boats":=20]
AB.params$model[Group=="shrimp", shrimpers:=5]
AB.params$model[Group=="anchovy", bait_boats:=20]
AB.params$model[Group=="shrimp", shrimpers:=5]
# Static parameters for this example
#Biomass accumulation and unassimilated production
AB.params$model[Group=="seals", sealers:=0.49604]
AB.params$model[Group=="cod", trawlers:=45]
AB.params$model[Group=="whiting", trawlers:=20]
AB.params$model[Group=="mackerel", seiners:=40]
AB.params$model[Group=="anchovy", seiners:=120]
AB.params$model[Group=="anchovy", bait_boats:=20]
AB.params$model[Group=="shrimp", shrimpers:=5]
AB.params$model[Type < 3, BioAcc  := 0]
AB.params$model[Type < 2, Unassim := 0.2]
AB.params$model[Type == 2, Unassim := 0]
#Detrital Fate
AB.params$model[Type < 2, detritus := 1]
AB.params$model[Type > 1, detritus := 0]
#Check for issues in your parameter file with
check.rpath.params(AB.params)
#Once parameter file is built use this to run ecopath
AB <- rpath(AB.params, 'Anchovy Bay')
#Running Anchovy Bay in a closed loop
library(here); library(data.table); library(Rpath)
#Use balanced Anchovy Bay model
load(here('data', 'AB.params.rda'))
load(here('data', 'AB.rda'))
# create a scenario
AB.base <- rsim.scenario(AB, AB.params, 1:100)
#Determine reference point for cod----
#Turn off fishing to get a proxy for b0
gear <- AB.params$model[Type == 3, Group]
for(i in 1:length(gear)){
AB.base <- adjust.fishing(AB.base, parameter = 'ForcedEffort', group = gear[i],
value = 0, sim.year = 0:100)
}
AB.b0 <- rsim.run(AB.base, method = 'RK4', 1:25)
#Extract cod data and find b0
cod <- extract.node(AB.b0, 'cod')
cod.b0  <- max(cod$Biomass)
#Set reference point of 1/2 b0
cod.ref <- .5 * cod.b0
#control rule function----
#This modifies the effort matrix of the Rsim scenario object
bio.rule <- function(Rsim.scenario, Rsim.run, group, gear, ref.point, year){
group.num <- which(Rsim.scenario$params$spname == group)
gear.num  <- which(Rsim.scenario$params$spname == gear) - Rsim.scenario$params$NUM_BIO
current.effort <- Rsim.scenario$fishing$ForcedEffort[(year - 1)*12 + 1, gear.num]
if(Rsim.run$end_state$Biomass[group.num] > ref.point){
Rsim.scenario <- adjust.fishing(Rsim.scenario, 'ForcedEffort', group = gear,
sim.year = year + 1, value = current.effort * 1.05)
}
if(Rsim.run$end_state$Biomass[group.num] < ref.point){
Rsim.scenario <- adjust.fishing(Rsim.scenario, 'ForcedEffort', group = gear,
sim.year = year + 1, value = current.effort * .75)
}
return(Rsim.scenario)
}
#Run multistep scenario----
AB.base <- rsim.scenario(AB, AB.params, 1:100)
AB.init <- rsim.run(AB.base, method = 'AB', 1:25)
AB.full <- copy(AB.init)
for(i in 25:99){
AB.base <- bio.rule(AB.base, AB.full, 'cod', 'trawlers', cod.ref, i)
AB.full <- rsim.step(AB.base, AB.full, method = 'AB', i + 1)
}
#Visualize results
rsim.plot(AB.full, groups[1:11])
cod <- extract.node(AB.full, 'cod')
plot(cod$Biomass, xlab = 'Month', ylab = 'Biomass')
abline(h = cod.ref)
knitr::opts_chunk$set(echo = TRUE)
library(Rpath)
library(data.table)
#devtools::install_github('NOAA-EDAB/Rpath', build_vignettes = TRUE)
library(devtools)
library(Rpath)
library(data.table)
#devtools::install_github('NOAA-EDAB/Rpath', build_vignettes = TRUE)
library(devtools)
groups <- c('whales', 'seals', 'cod', 'whiting', 'mackerel', 'anchovy', 'shrimp',
'benthos', 'zooplankton', 'phytoplankton', 'detritus', 'sealers',
'trawlers', 'seiners', 'bait boats', 'shrimpers')
types <- c(rep(0, 9), 1, 2, rep(3, 5))
AB.params <- create.rpath.params(groups, types)
AB.params$model[Group=="seals", sealers:=0.49604]
AB.params$model[Group=="cod", trawlers:=45]
AB.params$model[Group=="whiting", trawlers:=20]
AB.params$model[Group=="mackerel", seiners:=40]
AB.params$model[Group=="anchovy", seiners:=120]
AB.params$model[Group=="anchovy", bait_boats:=20]
AB.params$model[Group=="shrimp", shrimpers:=5]
AB.params$model[Group=="seals", sealers:=0.0049604]
AB.params$model[Group=="cod", trawlers:=0.45]
AB.params$model[Group=="whiting", trawlers:=0.20]
AB.params$model[Group=="mackerel", seiners:=0.40]
AB.params$model[Group=="anchovy", seiners:=1.20]
AB.params$model[Group=="anchovy", bait_boats:=0.20]
AB.params$model[Group=="shrimp", shrimpers:=0.05]
knitr::opts_chunk$set(echo = TRUE)
library(Rpath)
library(data.table)
#devtools::install_github('NOAA-EDAB/Rpath', build_vignettes = TRUE)
library(devtools)
groups <- c('whales', 'seals', 'cod', 'whiting', 'mackerel', 'anchovy', 'shrimp',
'benthos', 'zooplankton', 'phytoplankton', 'detritus', 'sealers',
'trawlers', 'seiners', 'bait boats', 'shrimpers')
types <- c(rep(0, 9), 1, 2, rep(3, 5))
AB.params <- create.rpath.params(groups, types)
AB.params$model[Group=="seals", sealers:=0.0049604]
AB.params$model[Group=="cod", trawlers:=0.45]
AB.params$model[Group=="whiting", trawlers:=0.20]
AB.params$model[Group=="mackerel", seiners:=0.40]
AB.params$model[Group=="anchovy", seiners:=1.20]
AB.params$model[Group=="anchovy", bait_boats:=0.20]
AB.params$model[Group=="shrimp", shrimpers:=0.05]
AB.params$model[Type < 3, BioAcc  := 0]
AB.params$model[Type < 2, Unassim := 0.2]
AB.params$model[Type == 2, Unassim := 0]
#Detrital Fate
AB.params$model[Type < 2, detritus := 1]
AB.params$model[Type > 1, detritus := 0]
check.rpath.params(AB.params)
types
AB.params
AB.params$model
AB.params$model[Group=="whales", Biomass:=0.0881848]
AB.params$model[Group=="seals", Biomass:=0.0671307396]
AB.params$model
AB.params$model[Group=="whales", Biomass:=0.0881848]
AB.params$model[Group=="seals", Biomass:=0.0671307396]
AB.params$model[Group=="cod", Biomass:=3.1]
AB.params$model[Group=="whiting", Biomass:=1.7]
AB.params$model[Group=="mackerel", Biomass:=1.22]
AB.params$model[Group=="anchovy", Biomass:=6]
AB.params$model[Group=="shrimp", Biomass:=0.8]
AB.params$model[Group=="zooplankton", Biomass:=14.8]
AB.params$model[Group=="detritus", Biomass:=10]
AB.params$model[Group=="phytoplankton", Biomass:=9]
AB.params$model
